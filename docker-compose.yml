services:
  db_unified_search:
    image: postgres:12
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    volumes:
      - db_data_unified_search:/var/lib/postgresql/data/pgdata
    env_file:
      - .env
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_DB=${POSTGRES_DB?Variable not set}

  adminer_unified_search:
    image: adminer
    restart: always
    depends_on:
      - db_unified_search
    environment:
      - ADMINER_DESIGN=pepa-linha-dark

  prestart_unified_search:
    image: "${DOCKER_IMAGE_BACKEND?Variable not set}:${TAG-latest}"
    build:
      context: ./backend
    depends_on:
      db_unified_search:
        condition: service_healthy
    command: bash scripts/prestart.sh
    env_file:
      - .env
    environment:
      - DOMAIN=${DOMAIN}
      - FRONTEND_HOST=${FRONTEND_HOST?Variable not set}
      - ENVIRONMENT=${ENVIRONMENT}
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS}
      - SECRET_KEY=${SECRET_KEY?Variable not set}
      - DEFAULT_SUPER_ADMIN_EMAIL=${DEFAULT_SUPER_ADMIN_EMAIL?Variable not set}
      - DEFAULT_SUPER_ADMIN_PASSWORD=${DEFAULT_SUPER_ADMIN_PASSWORD?Variable not set}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - EMAILS_FROM_EMAIL=${EMAILS_FROM_EMAIL}
      - POSTGRES_SERVER=db_unified_search
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
      - SENTRY_DSN=${SENTRY_DSN}
    volumes:
      - ./backend/app:/app/app

  backend_unified_search:
    image: "${DOCKER_IMAGE_BACKEND?Variable not set}:${TAG-latest}"
    restart: always
    depends_on:
      db_unified_search:
        condition: service_healthy
      prestart_unified_search:
        condition: service_completed_successfully
    env_file:
      - .env
    environment:
      - DOMAIN=${DOMAIN}
      - FRONTEND_HOST=${FRONTEND_HOST?Variable not set}
      - ENVIRONMENT=${ENVIRONMENT}
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS}
      - SECRET_KEY=${SECRET_KEY?Variable not set}
      - DEFAULT_SUPER_ADMIN_EMAIL=${DEFAULT_SUPER_ADMIN_EMAIL?Variable not set}
      - DEFAULT_SUPER_ADMIN_PASSWORD=${DEFAULT_SUPER_ADMIN_PASSWORD?Variable not set}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - EMAILS_FROM_EMAIL=${EMAILS_FROM_EMAIL}
      - POSTGRES_SERVER=db_unified_search
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
      - SENTRY_DSN=${SENTRY_DSN}

    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://localhost:8000/api/v1/utils/health-check/",
        ]
      interval: 10s
      timeout: 5s
      retries: 5

    build:
      context: ./backend
    volumes:
      - ./backend/app:/app/app
      - shared_storage_unified_search:/storage
      - ./data_to_index:/app/data_to_index:rw
      
  celery_worker_unified_search:
    image: "${DOCKER_IMAGE_BACKEND?Variable not set}:${TAG-latest}"
    restart: always
    depends_on:
      db_unified_search:
        condition: service_healthy
      prestart_unified_search:
        condition: service_completed_successfully
    env_file:
      - .env

    build:
      context: ./backend

    command: bash scripts/celery_start.sh
    volumes:
      - ./backend/app:/app/app
      - ./logs:/app/logs
      - shared_storage_unified_search:/storage
      - ./data_to_index:/app/data_to_index:rw
    links:
      - rabbitmq_unified_search

  meilisearch:
    image: getmeili/meilisearch:v1.8.1
    restart: always
    ports:
      - 7788:7700
    volumes:
      - ${MEILI_DATA:-./meili_data.ms}:/meili_data/data.ms

    env_file:
      - .env

  vectordb_unified_search:
    image: qdrant/qdrant:v1.2.2
    #    mem_limit: 450m
    restart: always
    ports:
      - 6453:6333
    volumes:
      - qdrant_data_unified_search:/qdrant/storage
  rabbitmq_unified_search:
    container_name: rabbitmq_unified_search
    image: rabbitmq:3.9.29-management-alpine
    restart: always
    env_file:
      - .env
    ports:
      - "5679:5672"
      - "15679:15672"
    volumes:
      - rabbitmq_data_unified_search:/data

  frontend_unified_search:
    image: "${DOCKER_IMAGE_FRONTEND?Variable not set}:${TAG-latest}"
    restart: always
    build:
      context: ./search_query_frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_BACKEND_URL=${NEXT_PUBLIC_BACKEND_URL?Variable not set}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET?Variable not set}
      - NEXT_PUBLIC_FRONTEND_URL=${NEXT_PUBLIC_FRONTEND_URL?Variable not set}
      - NEXTAUTH_URL=${NEXTAUTH_URL?Variable not set}
      - NEXTAUTH_URL_INTERNAL=${NEXTAUTH_URL_INTERNAL?Variable not set}
      - NEXT_PUBLIC_BACKEND_INTERNAL_URL=${NEXT_PUBLIC_BACKEND_INTERNAL_URL?Variable not set}
    env_file:
      - .env
    links:
      - backend_unified_search

volumes:
  db_data_unified_search:
  qdrant_data_unified_search:
  rabbitmq_data_unified_search:
  shared_storage_unified_search: